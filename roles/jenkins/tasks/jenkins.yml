---
- hosts: worker2
  become: true
  vars_files:
    - ./jenkins_vars.yml
  vars:
      admin_user_pass: "{{ admin_user_pass }}"
      reader_user_pass: "{{ reader_user_pass }}"
  tasks:
  - name: Install wget and java
    package:
      name:
        - wget
        - default-jre 
        - gnupg
  - name: ensure the jenkins apt repository key is installed 
    apt_key:
      url: https://pkg.jenkins.io/debian-stable/jenkins.io.key 
      state: present
  - name: ensure the repository is configured
    apt_repository:
      repo: deb https://pkg.jenkins.io/debian-stable binary/
      state: present
  - name: ensure jenkins is installed 
    apt:
      name: jenkins
      state: present
      update_cache: yes
  - name: Configure JVM Arguments
    lineinfile:
      dest: /etc/default/jenkins
      #regexp: '^JAVA_ARGS='
      line: 'JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"'
      insertbefore: '^DAEMON_ARGS='
  - name: Start the Jenkins
    systemd:
      name: jenkins
      state: started
      enabled: true
  - name: Get init password Jenkins
    command: cat /var/lib/jenkins/secrets/initialAdminPassword
    become: true
    register: result
  - name: Print init password Jenkins
    debug:
      var: result.stdout
      #- name:               Get Jenkins Crumb
      #uri:
      #force_basic_auth: yes
      #url_username:     admin
      #url_password:     "{{ result.stdout }}"
      #url:              http://localhost:8080/crumbIssuer/api/json
      #return_content:   yes
      #register:           jenkins_crumb
      #until:              jenkins_crumb.content.find('Please wait while Jenkins is getting ready') == -1
      #retries:            10
      #delay:              5
      #- name: Crumb  Jenkins
      #debug:
      #var: jenkins_crumb.json.crumb
  - name: Setting master using a variable to hold a more complicate script
    set_fact:
      setmaster_mode_1: |
          import jenkins.model.*
          import hudson.security.*
          def instance = Jenkins.getInstance()
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount("writer","${user_pwd_admin}")
          instance.setSecurityRealm(hudsonRealm)
          def strategy = new GlobalMatrixAuthorizationStrategy() 
          //strategy.setAllowAnonymousRead(false)
          strategy.add(Jenkins.ADMINISTER, "jenkins")
          strategy.add(hudson.model.Item.READ,'reader')
          strategy.add(hudson.model.Item.BUILD,'writer')
          strategy.add(hudson.model.Item.CANCEL,'writer')
          strategy.add(hudson.model.Item.CONFIGURE,'writer')
          strategy.add(hudson.model.Item.CREATE,'writer')
          strategy.add(hudson.model.Item.DELETE,'writer')
          strategy.add(hudson.model.Item.DISCOVER,'writer')
          strategy.add(hudson.model.Item.READ,'writer')
          strategy.add(hudson.model.Item.WORKSPACE,'writer')
          strategy.add(hudson.model.View.CONFIGURE,'writer')
          strategy.add(hudson.model.View.CREATE,'writer')
          strategy.add(hudson.model.View.DELETE,'writer')
          strategy.add(hudson.model.View.READ,'writer')

          strategy.add(hudson.model.View.CONFIGURE,'reader')
          strategy.add(hudson.model.View.CREATE,'reader')
          strategy.add(hudson.model.View.DELETE,'reader')
          strategy.add(hudson.model.View.READ,'reader')
          strategy.add(hudson.model.Hudson.READ,'reader')
          strategy.add(hudson.model.Hudson.READ,'writer')
          instance.setAuthorizationStrategy(strategy)
          instance.save()

  - name: unlock and add admin user
    jenkins_script:
      script: "{{ setmaster_mode_1 }}"
      args:
        user_pwd_admin: "{{ admin_user_pass }}"
      user: jenkins
      #password: "{{ result.stdout }}"
      password: "jenkins"
      url: "http://{{ ansible_host }}:8080/"

      #- name: complete setup wizard
      #jenkins_script:
      #script: |
      #import static jenkins.model.Jenkins.instance as jenkins
      #import jenkins.install.InstallState
      #if (!jenkins.installState.isSetupComplete()) {
      #  InstallState.INITIAL_SETUP_COMPLETED.initializeState()
      #}
      #user: writer
     #password: "{{ result.stdout }}"
     #password: "jenkins"
     #url: "http://{{ ansible_host }}:8080/"
     
  - name: install plugin
    jenkins_plugin:
      name: "{{ item }}"
      state: latest
      url_username: jenkins
      url_password: "jenkins" 
      url: "http://{{ ansible_host }}:8080/"
    register: plugin_result
    until: plugin_result is success
    retries: 10
    delay: 2
    with_items: "{{ jenkins_plugins }}"
        #- script-security
        # - active-directory
        #- build-pipeline-plugin
        #- ace-editor
        #- script-security
        #- antisamy-markup-formatter
        #- windows-slaves
        #- ssh-slaves
        #- ssh-credentials
        #- javadoc
        #- pam-auth
        #- cvs
        #- external-monitor-job
        #- translation
        #- mailer
        #- ldap
        #- ant
        #- junit
        #- matrix-project
        #- maven-plugin
        #- git
        #- subversion
        #- credentials
        #- bouncycastle-api
        #- matrix-auth
    notify:
      -  Start Jenkins
  handlers:
    - name: Start Jenkins
      service:
        name: jenkins
        state: started
